/**
* Wordfind.js 0.0.1
* (c) 2012 Bill, BunKat LLC.
* Wordfind is freely distributable under the MIT license.
* For all details and documentation:
*     https://github.com/bunkat/wordfind
*/

(function () {

  'use strict';

  /**
  * Generates a new word find (word search) puzzle provided a set of words.
  * Can automatically determine the smallest puzzle size in which all words
  * fit, or the puzzle size can be manually configured.  Will automatically
  * increase puzzle size until a valid puzzle is found.
  *
  * WordFind has no dependencies.
  */

  /**
  * Initializes the WordFind object.
  *
  * @api private
  */
  var WordFind = function () {

    // Letters used to fill blank spots in the puzzle
    var letters = 'abcdefghijklmnoprstuvwy';

    /**
    * Definitions for all the different orientations in which words can be
    * placed within a puzzle. New orientation definitions can be added and they
    * will be automatically available.
    */

    // The list of all the possible orientations
    var allOrientations = ['horizontal','horizontalBack','vertical','verticalUp',
                           'diagonal','diagonalUp','diagonalBack','diagonalUpBack'];

    // The definition of the orientation, calculates the next square given a
    // starting square (x,y) and distance (i) from that square.
    var orientations = {
      horizontal:     function(x,y,i) { return {x: x+i, y: y  }; },
      horizontalBack: function(x,y,i) { return {x: x-i, y: y  }; },
      vertical:       function(x,y,i) { return {x: x,   y: y+i}; },
      verticalUp:     function(x,y,i) { return {x: x,   y: y-i}; },
      diagonal:       function(x,y,i) { return {x: x+i, y: y+i}; },
      diagonalBack:   function(x,y,i) { return {x: x-i, y: y+i}; },
      diagonalUp:     function(x,y,i) { return {x: x+i, y: y-i}; },
      diagonalUpBack: function(x,y,i) { return {x: x-i, y: y-i}; }
    };

    // Determines if an orientation is possible given the starting square (x,y),
    // the height (h) and width (w) of the puzzle, and the length of the word (l).
    // Returns true if the word will fit starting at the square provided using
    // the specified orientation.
    var checkOrientations = {
      horizontal:     function(x,y,h,w,l) { return w >= x + l; },
      horizontalBack: function(x,y,h,w,l) { return x + 1 >= l; },
      vertical:       function(x,y,h,w,l) { return h >= y + l; },
      verticalUp:     function(x,y,h,w,l) { return y + 1 >= l; },
      diagonal:       function(x,y,h,w,l) { return (w >= x + l) && (h >= y + l); },
      diagonalBack:   function(x,y,h,w,l) { return (x + 1 >= l) && (h >= y + l); },
      diagonalUp:     function(x,y,h,w,l) { return (w >= x + l) && (y + 1 >= l); },
      diagonalUpBack: function(x,y,h,w,l) { return (x + 1 >= l) && (y + 1 >= l); }
    };

    // Determines the next possible valid square given the square (x,y) was ]
    // invalid and a word lenght of (l).  This greatly reduces the number of
    // squares that must be checked. Returning {x: x+1, y: y} will always work
    // but will not be optimal.
    var skipOrientations = {
      horizontal:     function(x,y,l) { return {x: 0,   y: y+1  }; },
      horizontalBack: function(x,y,l) { return {x: l-1, y: y    }; },
      vertical:       function(x,y,l) { return {x: 0,   y: y+100}; },
      verticalUp:     function(x,y,l) { return {x: 0,   y: l-1  }; },
      diagonal:       function(x,y,l) { return {x: 0,   y: y+1  }; },
      diagonalBack:   function(x,y,l) { return {x: l-1, y: x>=l-1?y+1:y    }; },
      diagonalUp:     function(x,y,l) { return {x: 0,   y: y<l-1?l-1:y+1  }; },
      diagonalUpBack: function(x,y,l) { return {x: l-1, y: x>=l-1?y+1:y  }; }
    };

    /**
    * Initializes the puzzle and places words in the puzzle one at a time.
    *
    * Returns either a valid puzzle with all of the words or null if a valid
    * puzzle was not found.
    *
    * @param {[String]} words: The list of words to fit into the puzzle
    * @param {[Options]} options: The options to use when filling the puzzle
    */
    var fillPuzzle = function (words, options) {

      var puzzle = [], i, j, len;
      console.log('options = ', options);

      // initialize the puzzle with blanks
      for (i = 0; i < options.height; i++) {
        puzzle.push([]);
        for (j = 0; j < options.width; j++) {
          puzzle[i].push('');
        }
      }

      // add each word into the puzzle one at a time
      for (i = 0, len = words.length; i < len; i++) {
        if (!placeWordInPuzzle(puzzle, options, words[i])) {
          // if a word didn't fit in the puzzle, give up
          return null;
        }
      }

      // return the puzzle
      return puzzle;
    };

    /**
    * Adds the specified word to the puzzle by finding all of the possible
    * locations where the word will fit and then randomly selecting one. Options
    * controls whether or not word overlap should be maximized.
    *
    * Returns true if the word was successfully placed, false otherwise.
    *
    * @param {[[String]]} puzzle: The current state of the puzzle
    * @param {[Options]} options: The options to use when filling the puzzle
    * @param {String} word: The word to fit into the puzzle.
    */
    var placeWordInPuzzle = function (puzzle, options, word) {

      // find all of the best locations where this word would fit
      var locations = findBestLocations(puzzle, options, word);

      if (locations.length === 0) {
        return false;
      }

      // select a location at random and place the word there
      var sel = locations[Math.floor(Math.random() * locations.length)];
      placeWord(puzzle, word, sel.x, sel.y, orientations[sel.orientation]);

      return true;
    };

    /**
    * Iterates through the puzzle and determines all of the locations where
    * the word will fit. Options determines if overlap should be maximized or
    * not.
    *
    * Returns a list of location objects which contain an x,y cooridinate
    * indicating the start of the word, the orientation of the word, and the
    * number of letters that overlapped with existing letter.
    *
    * @param {[[String]]} puzzle: The current state of the puzzle
    * @param {[Options]} options: The options to use when filling the puzzle
    * @param {String} word: The word to fit into the puzzle.
    */
    var findBestLocations = function (puzzle, options, word) {

      var locations = [],
          height = options.height,
          width = options.width,
          wordLength = word.length,
          maxOverlap = 0; // we'll start looking at overlap = 0

      // loop through all of the possible orientations at this position
      for (var k = 0, len = options.orientations.length; k < len; k++) {
        
        var orientation = options.orientations[k],
            check = checkOrientations[orientation],
            next = orientations[orientation],
            skipTo = skipOrientations[orientation],
            x = 0, y = 0;

        // loop through every position on the board
        while( y < height ) {

          // see if this orientation is even possible at this location
          if (check(x, y, height, width, wordLength)) {

            // determine if the word fits at the current position
            var overlap = calcOverlap(word, puzzle, x, y, next);

            // if the overlap was bigger than previous overlaps that we've seen
            if (overlap >= maxOverlap || (!options.preferOverlap && overlap > -1)) {
              maxOverlap = overlap;
              locations.push({x: x, y: y, orientation: orientation, overlap: overlap});
            }

            x++;
            if (x >= width) {
              x = 0;
              y++;
            }
          }
          else {
            // if current cell is invalid, then skip to the next cell where
            // this orientation is possible. this greatly reduces the number
            // of checks that we have to do overall
            var nextPossible = skipTo(x,y,wordLength);
            x = nextPossible.x;
            y = nextPossible.y;
          }

        }
      }

      // finally prune down all of the possible locations we found by
      // only using the ones with the maximum overlap that we calculated
      return options.preferOverlap ?
             pruneLocations(locations, maxOverlap) :
             locations;
    };

    /**
    * Determines whether or not a particular word fits in a particular
    * orientation within the puzzle.
    *
    * Returns the number of letters overlapped with existing words if the word
    * fits in the specified position, -1 if the word does not fit.
    *
    * @param {String} word: The word to fit into the puzzle.
    * @param {[[String]]} puzzle: The current state of the puzzle
    * @param {int} x: The x position to check
    * @param {int} y: The y position to check
    * @param {function} fnGetSquare: Function that returns the next square
    */
    var calcOverlap = function (word, puzzle, x, y, fnGetSquare) {
      var overlap = 0;

      // traverse the squares to determine if the word fits
      for (var i = 0, len = word.length; i < len; i++) {

        var next = fnGetSquare(x, y, i),
            square = puzzle[next.y][next.x];
        
        // if the puzzle square already contains the letter we
        // are looking for, then count it as an overlap square
        if (square === word[i]) {
          overlap++;
        }
        // if it contains a different letter, than our word doesn't fit
        // here, return -1
        else if (square !== '' ) {
          return -1;
        }
      }

      // if the entire word is overlapping, skip it to ensure words aren't
      // hidden in other words
      return overlap;
    };

    /**
    * If overlap maximization was indicated, this function is used to prune the
    * list of valid locations down to the ones that contain the maximum overlap
    * that was previously calculated.
    *
    * Returns the pruned set of locations.
    *
    * @param {[Location]} locations: The set of locations to prune
    * @param {int} overlap: The required level of overlap
    */
    var pruneLocations = function (locations, overlap) {

      var pruned = [];
      for(var i = 0, len = locations.length; i < len; i++) {
        if (locations[i].overlap >= overlap) {
          pruned.push(locations[i]);
        }
      }

      return pruned;
    };

    /**
    * Places a word in the puzzle given a starting position and orientation.
    *
    * @param {[[String]]} puzzle: The current state of the puzzle
    * @param {String} word: The word to fit into the puzzle.
    * @param {int} x: The x position to check
    * @param {int} y: The y position to check
    * @param {function} fnGetSquare: Function that returns the next square
    */
    var placeWord = function (puzzle, word, x, y, fnGetSquare) {
      for (var i = 0, len = word.length; i < len; i++) {
        var next = fnGetSquare(x, y, i);
        puzzle[next.y][next.x] = word[i];
      }
    };

    return {

      /**
      * Returns the list of all of the possible orientations.
      * @api public
      */
      validOrientations: allOrientations,

      /**
      * Returns the orientation functions for traversing words.
      * @api public
      */
      orientations: orientations,

      /**
      * Generates a new word find (word search) puzzle.
      *
      * Settings:
      *
      * height: desired height of the puzzle, default: smallest possible
      * width:  desired width of the puzzle, default: smallest possible
      * orientations: list of orientations to use, default: all orientations
      * fillBlanks: true to fill in the blanks, default: true
      * maxAttempts: number of tries before increasing puzzle size, default:3
      * preferOverlap: maximize word overlap or not, default: true
      *
      * Returns the puzzle that was created.
      *
      * @param {[String]} words: List of words to include in the puzzle
      * @param {options} settings: The options to use for this puzzle
      * @api public
      */
      newPuzzle: function(words, settings) {
        var wordList, puzzle, attempts = 0, opts = settings || {};

        console.log('newPuzzle() :: settings = ', settings);
        
        // copy and sort the words by length, inserting words into the puzzle
        // from longest to shortest works out the best
        wordList = words.slice(0).sort( function (a,b) {
          return (a.length < b.length) ? 1 : 0;
        });
        
        // initialize the options
        var options = {
          height:       opts.height || wordList[0].length,
          width:        opts.width || wordList[0].length,
          orientations: opts.orientations || allOrientations,
          fillBlanks:   opts.fillBlanks !== undefined ? opts.fillBlanks : true,
          maxAttempts:  opts.maxAttempts || 3,
          preferOverlap: opts.preferOverlap !== undefined ? opts.preferOverlap : true
        };

        // add the words to the puzzle
        // since puzzles are random, attempt to create a valid one up to
        // maxAttempts and then increase the puzzle size and try again
        while (!puzzle) {
          while (!puzzle && attempts++ < options.maxAttempts) {
            puzzle = fillPuzzle(wordList, options);
          }

          if (!puzzle) {
            options.height++;
            options.width++;
            attempts = 0;
          }
        }

        // fill in empty spaces with random letters
        if (options.fillBlanks) {
          this.fillBlanks(puzzle, options);
        }

        return puzzle;
      },

      /**
      * Fills in any empty spaces in the puzzle with random letters.
      *
      * @param {[[String]]} puzzle: The current state of the puzzle
      * @api public
      */
      fillBlanks: function (puzzle) {
        for (var i = 0, height = puzzle.length; i < height; i++) {
          var row = puzzle[i];
          for (var j = 0, width = row.length; j < width; j++) {

            if (!puzzle[i][j]) {
              var randomLetter = Math.floor(Math.random() * letters.length);
              puzzle[i][j] = letters[randomLetter];
            }
          }
        }
      },

      /**
      * Returns the starting location and orientation of the specified words
      * within the puzzle. Any words that are not found are returned in the
      * notFound array.
      *
      * Returns
      *   x position of start of word
      *   y position of start of word
      *   orientation of word
      *   word
      *   overlap (always equal to word.length)
      *
      * @param {[[String]]} puzzle: The current state of the puzzle
      * @param {[String]} words: The list of words to find
      * @api public
      */
      solve: function (puzzle, words) {
        var options = {
                        height:       puzzle.length,
                        width:        puzzle[0].length,
                        orientations: allOrientations,
                        preferOverlap: true
                      },
            found = [],
            notFound = [];

        for(var i = 0, len = words.length; i < len; i++) {
          var word = words[i],
              locations = findBestLocations(puzzle, options, word);

          if (locations.length > 0 && locations[0].overlap === word.length) {
            locations[0].word = word;
            found.push(locations[0]);
          }
          else {
            notFound.push(word);
          }
        }

        return { found: found, notFound: notFound };
      },

      /**
      * Outputs a puzzle to the console, useful for debugging.
      * Returns a formatted string representing the puzzle.
      *
      * @param {[[String]]} puzzle: The current state of the puzzle
      * @api public
      */
      print: function (puzzle) {
        var puzzleString = '';
        for (var i = 0, height = puzzle.length; i < height; i++) {
          var row = puzzle[i];
          for (var j = 0, width = row.length; j < width; j++) {
            puzzleString += (row[j] === '' ? ' ' : row[j]) + ' ';
          }
          puzzleString += '\n';
        }

        console.log(puzzleString);
        return puzzleString;
      }
    };
  };

  /**
  * Allow library to be used within both the browser and node.js
  */
  var root = typeof exports !== "undefined" && exports !== null ? exports : window;
  root.wordfind = WordFind();

}).call(this);

/**
===========================================================================
===========================================================================
===========================================================================
===========================================================================
===========================================================================
===========================================================================
===========================================================================
===========================================================================
===========================================================================
===========================================================================
===========================================================================
===========================================================================
===========================================================================
===========================================================================
===========================================================================
===========================================================================
===========================================================================
===========================================================================
*/

/**
* Wordfind.js 0.0.1
* (c) 2012 Bill, BunKat LLC.
* Wordfind is freely distributable under the MIT license.
* For all details and documentation:
*     https://github.com/bunkat/wordfind
*/

(function (document, $, wordfind) {

  'use strict';

  /**
  * An example game using the puzzles created from wordfind.js. Click and drag
  * to highlight words.
  *
  * WordFindGame requires wordfind.js and jQuery.
  */

  /**
  * Initializes the WordFindGame object.
  *
  * @api private
  */
  var WordFindGame = function() {

    // List of words for this game
    var wordList;

    /**
    * Draws the puzzle by inserting rows of buttons into el.
    *
    * @param {String} el: The jQuery element to write the puzzle to
    * @param {[[String]]} puzzle: The puzzle to draw
    */
    var drawPuzzle = function (el, puzzle) {
      console.log('drawPuzzle()');
      var output = '';
      // for each row in the puzzle
      for (var i = 0, height = puzzle.length; i < height; i++) {
        // append a div to represent a row in the puzzle
        var row = puzzle[i];
        output += '<div>';
        // for each element in that row
        for (var j = 0, width = row.length; j < width; j++) {
            // append our button with the appropriate class
            output += '<button class="puzzleSquare" x="' + j + '" y="' + i + '">';
            output += row[j] || '&nbsp;';
            output += '</button>';
        }
        // close our div that represents a row
        output += '</div>';
      }

      $(el).html(output);
    };

    /**
    * Draws the words by inserting an unordered list into el.
    *
    * @param {String} el: The jQuery element to write the words to
    * @param {[String]} words: The words to draw
    */
    var drawWords = function (el, words) {
      
      var output = '<ul>';
      for (var i = 0, len = words.length; i < len; i++) {
        var word = words[i];
        output += '<li class="word ' + word + '">' + word;
      }
      output += '</ul>';

      $(el).prepend(output);
    };


    /**
    * Game play events.
    *
    * The following events handle the turns, word selection, word finding, and
    * game end.
    *
    */

    // Game state
    var startSquare, selectedSquares = [], curOrientation, curWord = '';

    /**
    * Event that handles mouse down on a new square. Initializes the game state
    * to the letter that was selected.
    *
    */
    var startTurn = function () {
      $(this).addClass('selected');
      startSquare = this;
      selectedSquares.push(this);
      curWord = $(this).text();
    };



    /**
    * Event that handles mouse over on a new square. Ensures that the new square
    * is adjacent to the previous square and the new square is along the path
    * of an actual word.
    *
    */
    var select = function (target) {
      // if the user hasn't started a word yet, just return
      if (!startSquare) {
        return;
      }

      // if the new square is actually the previous square, just return
      var lastSquare = selectedSquares[selectedSquares.length-1];
      if (lastSquare == target) {
        return;
      }

      // see if the user backed up and correct the selectedSquares state if
      // they did
      var backTo;
      for (var i = 0, len = selectedSquares.length; i < len; i++) {
        if (selectedSquares[i] == target) {
          backTo = i+1;
          break;
        }
      }

      while (backTo < selectedSquares.length) {
        $(selectedSquares[selectedSquares.length-1]).removeClass('selected');
        selectedSquares.splice(backTo,1);
        curWord = curWord.substr(0, curWord.length-1);
      }


      // see if this is just a new orientation from the first square
      // this is needed to make selecting diagonal words easier
      var newOrientation = calcOrientation(
          $(startSquare).attr('x')-0,
          $(startSquare).attr('y')-0,
          $(target).attr('x')-0,
          $(target).attr('y')-0
          );

      if (newOrientation) {
        selectedSquares = [startSquare];
        curWord = $(startSquare).text();
        if (lastSquare !== startSquare) {
          $(lastSquare).removeClass('selected');
          lastSquare = startSquare;
        }
        curOrientation = newOrientation;
      }

      // see if the move is along the same orientation as the last move
      var orientation = calcOrientation(
          $(lastSquare).attr('x')-0,
          $(lastSquare).attr('y')-0,
          $(target).attr('x')-0,
          $(target).attr('y')-0
          );

      // if the new square isn't along a valid orientation, just ignore it.
      // this makes selecting diagonal words less frustrating
      if (!orientation) {
        return;
      }

      // finally, if there was no previous orientation or this move is along
      // the same orientation as the last move then play the move
      if (!curOrientation || curOrientation === orientation) {
        curOrientation = orientation;
        playTurn(target);
      }

    };
    
    var touchMove = function(e) {
      var xPos = e.originalEvent.touches[0].pageX;
      var yPos = e.originalEvent.touches[0].pageY;
      var targetElement = document.elementFromPoint(xPos, yPos);
      select(targetElement)
    };
    
    var mouseMove = function() { 
      select(this);
    };

    /**
    * Updates the game state when the previous selection was valid.
    *
    * @param {el} square: The jQuery element that was played
    */
    var playTurn = function (square) {

      // make sure we are still forming a valid word
      for (var i = 0, len = wordList.length; i < len; i++) {
        if (wordList[i].indexOf(curWord + $(square).text()) === 0) {
          $(square).addClass('selected');
          selectedSquares.push(square);
          curWord += $(square).text();
          break;
        }
      }
    };

    /**
    * Event that handles mouse up on a square. Checks to see if a valid word
    * was created and updates the class of the letters and word if it was. Then
    * resets the game state to start a new word.
    *
    */
    var endTurn = function () {

      // see if we formed a valid word
      for (var i = 0, len = wordList.length; i < len; i++) {
        
        if (wordList[i] === curWord) {
          $('.selected').addClass('found');
          wordList.splice(i,1);
          $('.' + curWord).addClass('wordFound');
        }

        if (wordList.length === 0) {
          $('.puzzleSquare').addClass('complete');
        }
      }

      // reset the turn
      $('.selected').removeClass('selected');
      startSquare = null;
      selectedSquares = [];
      curWord = '';
      curOrientation = null;
    };

    /**
    * Given two points, ensure that they are adjacent and determine what
    * orientation the second point is relative to the first
    *
    * @param {int} x1: The x coordinate of the first point
    * @param {int} y1: The y coordinate of the first point
    * @param {int} x2: The x coordinate of the second point
    * @param {int} y2: The y coordinate of the second point
    */
    var calcOrientation = function (x1, y1, x2, y2) {

      for (var orientation in wordfind.orientations) {
        var nextFn = wordfind.orientations[orientation];
        var nextPos = nextFn(x1, y1, 1);

        if (nextPos.x === x2 && nextPos.y === y2) {
          return orientation;
        }
      }

      return null;
    };

    return {

      /**
      * Creates a new word find game and draws the board and words.
      *
      * Returns the puzzle that was created.
      *
      * @param {[String]} words: The words to add to the puzzle
      * @param {String} puzzleEl: Selector to use when inserting the puzzle
      * @param {String} wordsEl: Selector to use when inserting the word list
      * @param {Options} options: WordFind options to use when creating the puzzle
      */
      create: function(words, puzzleEl, wordsEl, options) {
        
        wordList = words.slice(0).sort();

        var puzzle = wordfind.newPuzzle(words, options);

         console.log('puzzle = ', puzzle);
        
        // draw out all of the words
        drawPuzzle(puzzleEl, puzzle);
        drawWords(wordsEl, wordList);

        // attach events to the buttons
        // optimistically add events for windows 8 touch
        if (window.navigator.msPointerEnabled) {
          $('.puzzleSquare').on('MSPointerDown', startTurn);
          $('.puzzleSquare').on('MSPointerOver', select);
          $('.puzzleSquare').on('MSPointerUp', endTurn);
        }
        else {
          $('.puzzleSquare').mousedown(startTurn);
          $('.puzzleSquare').mouseenter(mouseMove);
          $('.puzzleSquare').mouseup(endTurn);
          $('.puzzleSquare').on("touchstart", startTurn);
          $('.puzzleSquare').on("touchmove", touchMove);
          $('.puzzleSquare').on("touchend", endTurn);
        }

        return puzzle;
      },

      /**
      * Solves an existing puzzle.
      *
      * @param {[[String]]} puzzle: The puzzle to solve
      * @param {[String]} words: The words to solve for
      */
      solve: function(puzzle, words) {

        var solution = wordfind.solve(puzzle, words).found;

        for( var i = 0, len = solution.length; i < len; i++) {
          var word = solution[i].word,
              orientation = solution[i].orientation,
              x = solution[i].x,
              y = solution[i].y,
              next = wordfind.orientations[orientation];

          if (!$('.' + word).hasClass('wordFound')) {
            for (var j = 0, size = word.length; j < size; j++) {
              var nextPos = next(x, y, j);
              $('[x="' + nextPos.x + '"][y="' + nextPos.y + '"]').addClass('solved');
            }

            $('.' + word).addClass('wordFound');
          }
        }
        
        $('#solve').addClass('gameSolved'); 

      }
    };
  };


  /**
  * Allow game to be used within the browser
  */
  window.wordfindgame = WordFindGame();

}(document, jQuery, wordfind));

$(function () {
  const allWords = ['a',
'abilities',
'ability',
'able',
'about',
'above',
'absence',
'absolute',
'absolutely',
'abuse',
'academic',
'accept',
'acceptable',
'accepted',
'accepting',
'accepts',
'access',
'accessible',
'accident',
'accidental',
'accidentally',
'accord',
'accorded',
'according',
'accordingly',
'accords',
'account',
'accounts',
'accuracy',
'accurate',
'achieve',
'achieved',
'achieves',
'achieving',
'acquire',
'acquired',
'acquires',
'acquiring',
'across',
'act',
'acted',
'acting',
'action',
'actions',
'active',
'activities',
'activity',
'acts',
'actual',
'actually',
'add',
'added',
'adding',
'addition',
'additional',
'address',
'addressed',
'addresses',
'addressing',
'adds',
'adequate',
'adjust',
'administration',
'admit',
'admits',
'admitted',
'admittedly',
'admitting',
'adopt',
'adopted',
'adopting',
'adopts',
'advance',
'advanced',
'advances',
'advancing',
'advantage',
'advantages',
'advertise',
'advertised',
'advertises',
'advertising',
'advice',
'advise',
'advised',
'advises',
'advising',
'affair',
'affairs',
'affect',
'affected',
'affecting',
'affects',
'afford',
'afraid',
'after',
'afternoon',
'again',
'against',
'age',
'agency',
'ages',
'ago',
'agree',
'agreed',
'agreeing',
'agreement',
'agrees',
'ahead',
'aid',
'aim',
'aimed',
'aiming',
'aims',
'air',
'alarm',
'album',
'algorithm',
'algorithms',
'alias',
'alive',
'all',
'allow',
'allowed',
'allowing',
'allows',
'almost',
'alone',
'along',
'already',
'also',
'alter',
'altered',
'altering',
'alternate',
'alternative',
'alternatively',
'alternatives',
'alters',
'although',
'altogether',
'always',
'am',
'ambiguous',
'among',
'amongst',
'amount',
'amounts',
'amuse',
'amused',
'amuses',
'amusing',
'an',
'analogue',
'analysis',
'ancient',
'and',
'angle',
'angry',
'animal',
'announce',
'announcement',
'annoy',
'annoyed',
'annoying',
'annoys',
'annual',
'anonymous',
'another',
'answer',
'answered',
'answering',
'answers',
'any',
'anybody',
'anyone',
'anyplace',
'anything',
'anyway',
'anywhere',
'apart',
'apologies',
'apology',
'apparent',
'apparently',
'appeal',
'appear',
'appearance',
'appeared',
'appearing',
'appears',
'apple',
'application',
'applications',
'applied',
'applies',
'apply',
'applying',
'appreciate',
'appreciated',
'appreciates',
'appreciating',
'approach',
'appropriate',
'approval',
'approve',
'approved',
'approves',
'approving',
'arbitrary',
'are',
'area',
'areas',
'argue',
'argued',
'argues',
'arguing',
'argument',
'arguments',
'arise',
'arises',
'arithmetic',
'arm',
'army',
'around',
'arrange',
'arranged',
'arrangement',
'arrangements',
'arranges',
'arranging',
'arrive',
'arrived',
'arrives',
'arriving',
'art',
'article',
'articles',
'artificial',
'artist',
'as',
'aside',
'ask',
'asked',
'asking',
'asks',
'asleep',
'aspect',
'aspects',
'assembler',
'assembly',
'assistant',
'associate',
'associated',
'associates',
'associating',
'association',
'assume',
'assumed',
'assumes',
'assuming',
'assumption',
'assure',
'assured',
'assures',
'assuring',
'at',
'ate',
'atmosphere',
'attach',
'attached',
'attaching',
'attaches',
'attack',
'attempt',
'attempted',
'attempting',
'attempts',
'attend',
'attended',
'attending',
'attends',
'attention',
'attitude',
'attract',
'attractive',
'audience',
'author',
'authorities',
'authority',
'authors',
'automatic',
'automatically',
'automobile',
'autumn',
'available',
'average',
'avoid',
'avoided',
'avoiding',
'avoids',
'awake',
'award',
'aware',
'away',
'awful',
'awkward',
'back',
'backed',
'background',
'backing',
'backs',
'backwards',
'bad',
'badly',
'balance',
'ball',
'ban',
'band',
'bank',
'bar',
'bars',
'base',
'based',
'bases',
'basic',
'basically',
'basing',
'basis',
'battery',
'be',
'bear',
'bearing',
'bears',
'beautiful',
'became',
'because',
'become',
'becomes',
'becoming',
'bed',
'been',
'before',
'beforehand',
'began',
'begin',
'beginning',
'begins',
'begun',
'behalf',
'behave',
'behind',
'being',
'believe',
'believed',
'believes',
'believing',
'belong',
'belongs',
'below',
'benefit',
'benefits',
'besides',
'best',
'bet',
'bets',
'better',
'betting',
'between',
'beyond',
'bid',
'bidding',
'bids',
'big',
'bigger',
'biggest',
'bill',
'binary',
'bind',
'binding',
'binds',
'biology',
'bit',
'bite',
'bites',
'biting',
'bits',
'bitten',
'bizarre',
'black',
'blame',
'blank',
'block',
'blow',
'blue',
'board',
'boards',
'boat',
'bodies',
'body',
'book',
'books',
'boot',
'bore',
'borne',
'borrow',
'borrowed',
'borrowing',
'borrows',
'both',
'bother',
'bothered',
'bothering',
'bothers',
'bottle',
'bottom',
'bought',
'bound',
'box',
'boxes',
'boy',
'bracket',
'brackets',
'branch',
'branches',
'brand',
'breach',
'break',
'breaking',
'breaks',
'bridge',
'brief',
'briefly',
'bright',
'bring',
'bringing',
'brings',
'broadcast',
'broadcasting',
'broadcasts',
'broke',
'broken',
'brother',
'brought',
'brown',
'bucket',
'budget',
'buffer',
'bug',
'bugs',
'build',
'building',
'buildings',
'builds',
'built',
'bulk',
'bulletin',
'buried',
'buries',
'bury',
'burying',
'bus',
'business',
'busy',
'but',
'button',
'buy',
'buying',
'buys',
'by',
'byte',
'bytes',
'calculate',
'calculation',
'calculations',
'call',
'called',
'calling',
'calls',
'came',
'campaign',
'can',
'candidate',
'cannot',
'capable',
'capacity',
'capital',
'captain',
'car',
'card',
'cardboard',
'cards',
'care',
'careful',
'carefully',
'cares',
'carried',
'carries',
'carry',
'carrying',
'case',
'cases',
'cassette',
'cat',
'catch',
'catches',
'catching',
'categories',
'category',
'caught',
'cause',
'caused',
'causes',
'causing',
'cease',
'cell',
'cent',
'central',
'century',
'certain',
'certainly',
'chain',
'chair',
'chairman',
'chance',
'chances',
'change',
'changed',
'changes',
'changing',
'channel',
'channels',
'chaos',
'chapter',
'char',
'character',
'characters',
'charge',
'charged',
'charges',
'charging',
'chars',
'cheap',
'cheaper',
'cheapest',
'checked',
'checking',
'chemical',
'child',
'children',
'chip',
'chips',
'choice',
'choose',
'chooses',
'choosing',
'chose',
'chosen',
'church',
'circle',
'circuit',
'circulation',
'circumstance',
'circumstances',
'citizen',
'city',
'claim',
'claimed',
'claiming',
'claims',
'clarify',
'class',
'classes',
'clean',
'clear',
'cleared',
'clearer',
'clearest',
'clearing',
'clearly',
'clears',
'clever',
'clock',
'close',
'closed',
'closely',
'closer',
'closes',
'closest',
'closing',
'club',
'clue',
'code',
'coded',
'codes',
'coding',
'coffee',
'cold',
'collapse',
'collect',
'collected',
'collecting',
'collection',
'collects',
'college',
'colleges',
'column',
'combination',
'combinations',
'combine',
'combined',
'combines',
'combining',
'come',
'comes',
'coming',
'command',
'commands',
'comment',
'commented',
'commenting',
'comments',
'commercial',
'commission',
'commitment',
'committee',
'common',
'commonly',
'communicate',
'communication',
'communications',
'community',
'company',
'comparable',
'comparatively',
'compare',
'compared',
'compares',
'comparing',
'comparison',
'compatibility',
'compatible',
'competition',
'compiler',
'complain',
'complained',
'complaining',
'complains',
'complaint',
'complaints',
'complete',
'completed',
'completely',
'completes',
'completing',
'complex',
'complexity',
'complicate',
'complicated',
'complicates',
'complicating',
'component',
'components',
'compose',
'composed',
'composes',
'composing',
'composition',
'comprehensive',
'compromise',
'compulsory',
'compute',
'computed',
'computer',
'computers',
'computes',
'computing',
'concept',
'concern',
'concerned',
'concerning',
'concerns',
'conclusion',
'concrete',
'condition',
'conditions',
'conference',
'confident',
'confirm',
'confirmed',
'confirming',
'confirms',
'confuse',
'confused',
'confuses',
'confusing',
'confusion',
'connect',
'connected',
'connecting',
'connection',
'connections',
'connects',
'consequence',
'consequences',
'consequently',
'consider',
'considerable',
'considerably',
'consideration',
'considered',
'considering',
'considers',
'consist',
'consistency',
'consistent',
'consists',
'constant',
'constraint',
'constraints',
'construct',
'consumption',
'contact',
'contain',
'contained',
'containing',
'contains',
'content',
'contents',
'context',
'continually',
'continuation',
'continue',
'continued',
'continues',
'continuing',
'continuous',
'continuously',
'contract',
'contrary',
'contrast',
'contribute',
'contribution',
'contributions',
'control',
'controlled',
'controlling',
'controls',
'convenient',
'convention',
'conventional',
'conventions',
'conversation',
'convert',
'convince',
'convinced',
'convinces',
'convincing',
'cope',
'copied',
'copies',
'copy',
'copying',
'core',
'corner',
'corners',
'correct',
'corrected',
'correcting',
'correction',
'correctly',
'corrects',
'corrupt',
'corrupted',
'corrupting',
'corrupts',
'cost',
'costing',
'costs',
'could',
'council',
'count',
'counted',
'counter',
'counting',
'country',
'counts',
'county',
'couple',
'course',
'courses',
'court',
'cover',
'covered',
'covering',
'covers',
'crash',
'crashed',
'crashes',
'crashing',
'crazy',
'create',
'created',
'creates',
'creating',
'creation',
'creature',
'credit',
'crisis',
'crisp',
'crisps',
'critical',
'criticism',
'cross',
'cry',
'cs',
'culture',
'cup',
'cure',
'curious',
'current',
'currently',
'cursor',
'customer',
'cut',
'cuts',
'cutting',
'cycle',
'cycles',
'daily',
'damage',
'damaged',
'damages',
'damaging',
'danger',
'dangerous',
'dare',
'dark',
'data',
'database',
'date',
'dated',
'dates',
'dating',
'datum',
'day',
'days',
'dead',
'deal',
'dealing',
'deals',
'dealt',
'dear',
'death',
'debate',
'decade',
'decent',
'decide',
'decided',
'decides',
'deciding',
'decision',
'decisions',
'declare',
'declared',
'declares',
'declaring',
'decrease',
'dedicate',
'dedicated',
'dedicates',
'dedicating',
'deduce',
'deem',
'deemed',
'deeming',
'deems',
'deep',
'deeply',
'default',
'define',
'defined',
'defines',
'defining',
'definite',
'definitely',
'definition',
'definitions',
'definitive',
'degree',
'degrees',
'delay',
'delete',
'deleted',
'deletes',
'deleting',
'deliberate',
'deliberately',
'deliver',
'delivered',
'delivering',
'delivers',
'delivery',
'demand',
'demands',
'democratic',
'demonstrate',
'demonstration',
'department',
'depend',
'depended',
'depending',
'depends',
'depth',
'derive',
'derived',
'derives',
'deriving',
'describe',
'described',
'describes',
'describing',
'description',
'descriptions',
'design',
'designed',
'designing',
'designs',
'desirable',
'desire',
'desired',
'desires',
'desiring',
'desk',
'desperate',
'despite',
'destroy',
'destroyed',
'destroying',
'destroys',
'detail',
'detailed',
'detailing',
'details',
'detect',
'detected',
'detecting',
'detects',
'determine',
'determined',
'determines',
'determining',
'develop',
'developed',
'developing',
'development',
'develops',
'device',
'devices',
'devote',
'devoted',
'devotes',
'devoting',
'dictionary',
'did',
'die',
'died',
'dies',
'differ',
'difference',
'differences',
'different',
'differently',
'difficult',
'difficulties',
'difficulty',
'digit',
'digital',
'digits',
'dinner',
'direct',
'directed',
'directing',
'direction',
'directions',
'directly',
'director',
'directory',
'directs',
'dirty',
'disadvantage',
'disagree',
'disappear',
'disappeared',
'disappearing',
'disappears',
'disaster',
'disc',
'discipline',
'discount',
'discourage',
'discouraged',
'discourages',
'discouraging',
'discover',
'discovered',
'discovering',
'discovers',
'discs',
'discuss',
'discussed',
'discusses',
'discussing',
'discussion',
'discussions',
'disk',
'dislike',
'display',
'displayed',
'displaying',
'displays',
'distance',
'distant',
'distinct',
'distinction',
'distinctly',
'distinguish',
'distribute',
'distributed',
'distributes',
'distributing',
'distribution',
'district',
'disturb',
'disturbed',
'disturbing',
'disturbs',
'ditto',
'divide',
'divided',
'divides',
'dividing',
'division',
'do',
'document',
'documentation',
'documented',
'documenting',
'documents',
'doe',
'does',
'dog',
'doing',
'dollar',
'domain',
'done',
'door',
'doors',
'double',
'doubt',
'doubtful',
'down',
'dozen',
'dozens',
'drastic',
'draw',
'drawing',
'drawn',
'draws',
'dream',
'drew',
'drink',
'drive',
'driven',
'driver',
'drivers',
'drives',
'driving',
'drop',
'dropped',
'dropping',
'drops',
'drove',
'dry',
'dubious',
'due',
'dumb',
'dump',
'during',
'duty',
'dying',
'each',
'earlier',
'earliest',
'early',
'earth',
'ease',
'easier',
'easiest',
'easily',
'east',
'easy',
'eat',
'eaten',
'eating',
'eats',
'economic',
'economy',
'edge',
'edit',
'edited',
'editing',
'edition',
'editor',
'editors',
'edits',
'education',
'educational',
'effect',
'effective',
'effectively',
'effects',
'efficient',
'effort',
'efforts',
'eight',
'either',
'elect',
'elected',
'electing',
'election',
'electric',
'electronic',
'electronics',
'elects',
'element',
'elements',
'elevator',
'else',
'elsewhere',
'embarrass',
'embarrassed',
'embarrasses',
'embarrassing',
'emergency',
'emphasis',
'employee',
'empty',
'enable',
'enables',
'encounter',
'encountered',
'encountering',
'encounters',
'encourage',
'encouraged',
'encourages',
'encouraging',
'end',
'ended',
'ending',
'ends',
'enemy',
'engineer',
'engineered',
'engineering',
'engineers',
'enjoy',
'enormous',
'enough',
'ensure',
'ensured',
'ensures',
'ensuring',
'enter',
'entered',
'entering',
'enters',
'entire',
'entirely',
'entitle',
'entitled',
'entitles',
'entitling',
'entity',
'entrance',
'entries',
'entry',
'environment',
'equal',
'equally',
'equipment',
'equivalent',
'eraser',
'err',
'error',
'errors',
'escape',
'especially',
'essential',
'essentially',
'establish',
'established',
'establishes',
'establishing',
'establishment',
'estimate',
'even',
'evened',
'evening',
'evenings',
'evens',
'event',
'events',
'eventually',
'ever',
'every',
'everybody',
'everyone',
'everything',
'everywhere',
'evidence',
'exact',
'exactly',
'examine',
'examined',
'examines',
'examining',
'example',
'examples',
'excellent',
'except',
'exception',
'exceptions',
'excess',
'excessive',
'exchange',
'exclude',
'excluded',
'excludes',
'excluding',
'exclusive',
'excuse',
'execute',
'executed',
'executes',
'executing',
'exercise',
'exist',
'existed',
'existence',
'existing',
'exists',
'expand',
'expanded',
'expanding',
'expands',
'expansion',
'expect',
'expected',
'expecting',
'expects',
'expense',
'expensive',
'experience',
'experienced',
'experiences',
'experiencing',
'experiment',
'experimental',
'experiments',
'expert',
'experts',
'explain',
'explained',
'explaining',
'explains',
'explanation',
'explicit',
'express',
'expressed',
'expresses',
'expressing',
'expression',
'extend',
'extended',
'extending',
'extends',
'extension',
'extensive',
'extent',
'external',
'extra',
'extract',
'extreme',
'extremely',
'eye',
'eyes',
'face',
'facilities',
'facility',
'fact',
'factor',
'factors',
'facts',
'fail',
'failed',
'failing',
'fails',
'failure',
'fair',
'fairly',
'faith',
'fall',
'fallen',
'falling',
'falls',
'FALSE',
'familiar',
'family',
'famous',
'fan',
'fancy',
'far',
'farm',
'farther',
'farthest',
'fashion',
'fast',
'faster',
'fastest',
'fatal',
'fate',
'father',
'fault',
'faults',
'fear',
'feasible',
'feature',
'features',
'fed',
'federal',
'feed',
'feedback',
'feeding',
'feeds',
'feel',
'feeling',
'feels',
'feet',
'fell',
'felt',
'few',
'fewer',
'fewest',
'field',
'fields',
'fight',
'figure',
'figures',
'file',
'filed',
'files',
'filing',
'fill',
'filled',
'filling',
'fills',
'film',
'final',
'finally',
'financial',
'find',
'finding',
'finds',
'fine',
'finger',
'fingers',
'finish',
'finished',
'finishes',
'finishing',
'finite',
'fire',
'firm',
'firmly',
'first',
'firstly',
'fiscal',
'fish',
'fishes',
'fit',
'fits',
'fitted',
'fitting',
'five',
'fix',
'fixed',
'fixes',
'fixing',
'flag',
'flash',
'flashed',
'flashes',
'flashing',
'flat',
'flew',
'flexible',
'flied',
'flies',
'flight',
'float',
'floated',
'floating',
'floats',
'floor',
'flow',
'flown',
'fly',
'flying',
'folk',
'folks',
'follow',
'followed',
'following',
'follows',
'food',
'foot',
'for',
'force',
'forced',
'forces',
'forcing',
'foreign',
'forever',
'forget',
'forgets',
'forgetting',
'forgot',
'forgotten',
'form',
'formal',
'format',
'formed',
'former',
'forming',
'forms',
'forth',
'forthcoming',
'fortunately',
'fortune',
'forward',
'found',
'four',
'fourth',
'fraction',
'frame',
'free',
'freedom',
'freely',
'french',
'frequent',
'frequently',
'fresh',
'friend',
'friendly',
'friends',
'fries',
'from',
'front',
'fry',
'full',
'fully',
'fun',
'function',
'functions',
'fund',
'fundamental',
'fundamentally',
'funds',
'funny',
'further',
'furthest',
'future',
'gain',
'gained',
'gaining',
'gains',
'game',
'games',
'gap',
'garbage',
'garden',
'gas',
'gasoline',
'gather',
'gave',
'general',
'generally',
'generate',
'generated',
'generates',
'generating',
'generation',
'genuine',
'get',
'gets',
'getting',
'girl',
'give',
'given',
'gives',
'giving',
'glad',
'glass',
'global',
'go',
'goes',
'going',
'gone',
'good',
'goods',
'got',
'gotten',
'government',
'governor',
'gradually',
'graduate',
'grand',
'grands',
'grant',
'granted',
'granting',
'grants',
'graph',
'graphic',
'graphics',
'grateful',
'grave',
'great',
'greater',
'greatest',
'greatly',
'green',
'grew',
'grind',
'grinding',
'grinds',
'gross',
'grosses',
'ground',
'grounds',
'group',
'groups',
'grow',
'growing',
'grown',
'grows',
'growth',
'guarantee',
'guaranteed',
'guaranteeing',
'guarantees',
'guard',
'guess',
'guessed',
'guesses',
'guessing',
'guide',
'gun',
'guy',
'habit',
'habits',
'hack',
'had',
'hair',
'half',
'hall',
'hand',
'handed',
'handing',
'handle',
'handled',
'handles',
'handling',
'hands',
'handy',
'hang',
'hanged',
'hanging',
'hangs',
'happen',
'happened',
'happening',
'happens',
'happily',
'happy',
'hard',
'harder',
'hardest',
'hardly',
'hardware',
'harm',
'harmful',
'harmless',
'has',
'hat',
'hate',
'have',
'having',
'he',
'head',
'headed',
'header',
'heading',
'heads',
'health',
'healthy',
'hear',
'heard',
'hearing',
'hears',
'heart',
'heat',
'heavily',
'heavy',
'held',
'hell',
'hello',
'help',
'helped',
'helpful',
'helping',
'helps',
'hence',
'her',
'here',
'hereby',
'herself',
'hid',
'hidden',
'hide',
'hides',
'hiding',
'high',
'higher',
'highest',
'highly',
'hill',
'him',
'himself',
'hint',
'hints',
'his',
'historical',
'history',
'hit',
'hits',
'hitting',
'hold',
'holding',
'holds',
'hole',
'holes',
'holiday',
'holidays',
'home',
'honest',
'hope',
'hoped',
'hopefully',
'hopes',
'hoping',
'horrible',
'horse',
'horses',
'hospital',
'host',
'hot',
'hotel',
'hour',
'hours',
'house',
'how',
'however',
'huge',
'human',
'hundred',
'hundreds',
'hung',
'hunt',
'hurry',
'husband',
'ice',
'idea',
'ideal',
'ideas',
'identical',
'identify',
'identity',
'if',
'ignore',
'ignored',
'ignores',
'ignoring',
'ill',
'illegal',
'image',
'images',
'imagination',
'imagine',
'immediate',
'immediately',
'impact',
'implement',
'implemented',
'implementing',
'implements',
'implication',
'implications',
'implied',
'implies',
'imply',
'implying',
'importance',
'important',
'importantly',
'impose',
'imposed',
'imposes',
'imposing',
'impossible',
'impression',
'improve',
'improved',
'improvement',
'improvements',
'improves',
'improving',
'in',
'inability',
'inadequate',
'inch',
'inches',
'incident',
'incidentally',
'incline',
'inclined',
'inclines',
'inclining',
'include',
'included',
'includes',
'including',
'income',
'incompatible',
'incomplete',
'inconsistent',
'inconvenience',
'incorrect',
'increase',
'increased',
'increases',
'increasing',
'indeed',
'independent',
'independently',
'index',
'indicate',
'indicates',
'indication',
'individual',
'individually',
'individuals',
'industrial',
'industry',
'inevitably',
'inferior',
'infinite',
'influence',
'info',
'inform',
'information',
'informed',
'informing',
'informs',
'initial',
'initially',
'initials',
'inner',
'innocent',
'input',
'inputs',
'inputted',
'inputting',
'insert',
'inserted',
'inserting',
'inserts',
'inside',
'insist',
'insisted',
'insisting',
'insists',
'install',
'installed',
'installing',
'installs',
'instance',
'instant',
'instantly',
'instead',
'institution',
'institutions',
'instruction',
'instructions',
'insurance',
'integer',
'integers',
'integral',
'intelligence',
'intelligent',
'intend',
'intended',
'intending',
'intends',
'intention',
'interact',
'interest',
'interested',
'interesting',
'interests',
'interface',
'internal',
'international',
'interpret',
'interpretation',
'interpreted',
'interpreting',
'interprets',
'interval',
'intervals',
'intervention',
'into',
'introduce',
'introduced',
'introduces',
'introducing',
'introduction',
'invalid',
'invariably',
'invent',
'invented',
'inventing',
'invents',
'investigate',
'invisible',
'invitation',
'invite',
'invited',
'invites',
'inviting',
'involve',
'involved',
'involves',
'involving',
'irrelevant',
'irritate',
'irritated',
'irritates',
'irritating',
'is',
'isolate',
'isolated',
'isolates',
'isolating',
'issue',
'issued',
'issues',
'issuing',
'it',
'item',
'items',
'its',
'itself',
'job',
'jobs',
'join',
'joined',
'joining',
'joins',
'joint',
'joke',
'joy',
'judge',
'jump',
'jumps',
'junk',
'just',
'justification',
'justified',
'justifies',
'justify',
'justifying',
'keen',
'keep',
'keeping',
'keeps',
'kept',
'key',
'keyboard',
'keys',
'kid',
'kill',
'killed',
'killing',
'kills',
'kind',
'kindly',
'kinds',
'king',
'knew',
'knock',
'knocked',
'knocking',
'knocks',
'know',
'knowing',
'knowledge',
'known',
'knows',
'label',
'labels',
'laboratory',
'lack',
'lacked',
'lacking',
'lacks',
'ladies',
'lady',
'lain',
'land',
'landed',
'landing',
'lands',
'language',
'languages',
'large',
'largely',
'larger',
'largest',
'last',
'lasts',
'late',
'later',
'latest',
'latter',
'law',
'laws',
'lay',
'layout',
'lazy',
'leach',
'lead',
'leaded',
'leader',
'leading',
'leads',
'leaf',
'learn',
'learning',
'learns',
'least',
'leave',
'leaved',
'leaves',
'leaving',
'lecture',
'lectures',
'led',
'left',
'leg',
'legal',
'legally',
'legs',
'lend',
'length',
'less',
'lesser',
'lesson',
'lessons',
'let',
'lets',
'letter',
'letters',
'letting',
'level',
'levels',
'liable',
'libraries',
'library',
'lie',
'lied',
'lies',
'life',
'lifetime',
'lift',
'light',
'lights',
'like',
'liked',
'likely',
'likes',
'likewise',
'liking',
'limit',
'limited',
'limiting',
'limits',
'line',
'linear',
'lines',
'link',
'linked',
'linking',
'links',
'list',
'listed',
'listen',
'listing',
'lists',
'literally',
'literature',
'little',
'live',
'lived',
'lives',
'living',
'load',
'loaded',
'loading',
'loads',
'loan',
'local',
'location',
'locations',
'lock',
'locked',
'locking',
'locks',
'log',
'logged',
'logging',
'logic',
'logical',
'logs',
'long',
'longer',
'longest',
'look',
'looked',
'looking',
'looks',
'loop',
'loose',
'lorry',
'lose',
'loses',
'losing',
'loss',
'lost',
'lot',
'lots',
'loudly',
'love',
'low',
'lower',
'lowest',
'luck',
'lucky',
'lunch',
'lying',
'machine',
'machines',
'mad',
'made',
'magic',
'magnetic',
'magnitude',
'mail',
'main',
'mainly',
'maintain',
'maintained',
'maintaining',
'maintains',
'major',
'majority',
'make',
'makes',
'making',
'man',
'manage',
'managed',
'manager',
'manages',
'managing',
'manipulation',
'manner',
'manual',
'manuals',
'many',
'map',
'march',
'mark',
'marked',
'market',
'marking',
'marks',
'marriage',
'marry',
'mass',
'massive',
'master',
'match',
'matches',
'material',
'materials',
'mathematical',
'mathematics',
'matter',
'matters',
'maximum',
'may',
'maybe',
'me',
'mean',
'meaning',
'meaningful',
'meaningless',
'meanings',
'means',
'meant',
'measure',
'measured',
'measures',
'measuring',
'mechanic',
'mechanics',
'mechanism',
'media',
'medical',
'medium',
'mediums',
'meet',
'meeting',
'meetings',
'meets',
'member',
'members',
'membership',
'memory',
'men',
'mention',
'mentioned',
'mentioning',
'mentions',
'mere',
'merely',
'merit',
'merits',
'mess',
'message',
'messages',
'messy',
'met',
'metal',
'method',
'methods',
'middle',
'midnight',
'might',
'mile',
'miles',
'military',
'million',
'millions',
'mind',
'minded',
'minding',
'minds',
'mine',
'minimal',
'minimum',
'minor',
'minority',
'minute',
'minutes',
'mislead',
'misleading',
'misleads',
'misled',
'miss',
'missed',
'misses',
'missing',
'mistake',
'mistaken',
'mistakes',
'mistaking',
'mistook',
'misunderstand',
'misunderstanding',
'misunderstands',
'misunderstood',
'misuse',
'mix',
'mixed',
'mixes',
'mixing',
'mod',
'mode',
'model',
'models',
'modern',
'modified',
'modifies',
'modify',
'modifying',
'moment',
'money',
'monitor',
'month',
'months',
'moral',
'more',
'morning',
'mornings',
'most',
'mostly',
'mother',
'motion',
'mouth',
'move',
'moved',
'movement',
'movements',
'moves',
'movie',
'moving',
'much',
'multiple',
'music',
'must',
'my',
'myself',
'mysterious',
'naive',
'name',
'named',
'namely',
'names',
'naming',
'nasty',
'nation',
'national',
'natural',
'naturally',
'nature',
'naughty',
'near',
'nearby',
'nearer',
'nearest',
'nearly',
'necessarily',
'necessary',
'necessity',
'neck',
'need',
'needed',
'needing',
'needs',
'negative',
'neither',
'nervous',
'net',
'network',
'networks',
'never',
'nevertheless',
'new',
'news',
'next',
'nice',
'nicer',
'nicest',
'night',
'nine',
'no',
'nobody',
'noise',
'noisy',
'none',
'nonsense',
'nor',
'normal',
'normally',
'north',
'not',
'note',
'noted',
'notes',
'nothing',
'notice',
'noticed',
'notices',
'noticing',
'notify',
'noting',
'novel',
'now',
'nowadays',
'nowhere',
'numb',
'number',
'numbers',
'numbest',
'numerical',
'numerous',
'obey',
'object',
'objected',
'objecting',
'objection',
'objections',
'objects',
'obscure',
'observation',
'observe',
'observed',
'observes',
'observing',
'obtain',
'obtained',
'obtaining',
'obtains',
'obvious',
'obviously',
'occasion',
'occasional',
'occasionally',
'occasions',
'occupied',
'occupies',
'occupy',
'occupying',
'occur',
'occurred',
'occurring',
'occurs',
'odd',
'odds',
'of',
'off',
'offer',
'offered',
'offering',
'offers',
'office',
'officer',
'offices',
'official',
'often',
'oh',
'oil',
'old',
'older',
'oldest',
'omit',
'omits',
'omitted',
'omitting',
'on',
'once',
'one',
'ones',
'only',
'onto',
'open',
'opened',
'opening',
'opens',
'operate',
'operated',
'operates',
'operating',
'operation',
'operations',
'operator',
'operators',
'opinion',
'opinions',
'opportunities',
'opportunity',
'oppose',
'opposed',
'opposes',
'opposing',
'opposite',
'opposition',
'option',
'optional',
'options',
'or',
'order',
'ordered',
'ordering',
'orders',
'ordinary',
'origin',
'original',
'originally',
'other',
'others',
'otherwise',
'ought',
'our',
'ours',
'ourselves',
'out',
'outer',
'output',
'outside',
'over',
'overall',
'owe',
'owed',
'owes',
'owing',
'own',
'owner',
'owners',
'pack',
'package',
'packages',
'packet',
'page',
'pages',
'paid',
'pain',
'painful',
'pair',
'pairs',
'paper',
'papers',
'paragraph',
'parallel',
'parent',
'park',
'part',
'partial',
'partially',
'particular',
'particularly',
'parties',
'partly',
'parts',
'party',
'pass',
'passed',
'passes',
'passing',
'past',
'patch',
'path',
'patient',
'pattern',
'patterns',
'pause',
'pay',
'payed',
'paying',
'pays',
'peace',
'peak',
'peculiar',
'pen',
'people',
'per',
'perfect',
'perfectly',
'perform',
'performance',
'performed',
'performing',
'performs',
'perhaps',
'period',
'permanent',
'permanently',
'permission',
'permit',
'permits',
'permitted',
'permitting',
'person',
'personal',
'personally',
'persons',
'persuade',
'persuaded',
'persuades',
'persuading',
'petrol',
'phase',
'phenomenon',
'philosophy',
'phone',
'phrase',
'phrases',
'physical',
'pi',
'pick',
'picked',
'picking',
'picks',
'picture',
'pictures',
'piece',
'pieces',
'pile',
'pint',
'pipe',
'place',
'placed',
'places',
'placing',
'plain',
'plan',
'plane',
'planet',
'planned',
'planning',
'plans',
'plant',
'plastic',
'play',
'played',
'playing',
'plays',
'plea',
'pleasant',
'please',
'pleased',
'pleases',
'pleasing',
'plenty',
'plot',
'plots',
'plug',
'plus',
'pocket',
'poem',
'poet',
'point',
'pointed',
'pointing',
'pointless',
'points',
'police',
'policies',
'policy',
'political',
'poll',
'pool',
'poor',
'pop',
'popular',
'population',
'port',
'position',
'positions',
'positive',
'possibilities',
'possibility',
'possible',
'possibly',
'post',
'posted',
'posting',
'postmaster',
'posts',
'potential',
'potentially',
'pound',
'pounds',
'power',
'powerful',
'powers',
'practical',
'practically',
'precise',
'precisely',
'prefer',
'preferable',
'preferably',
'preference',
'preferred',
'preferring',
'prefers',
'preparation',
'prepare',
'prepared',
'prepares',
'preparing',
'presence',
'present',
'presented',
'presenting',
'presents',
'preserve',
'president',
'press',
'pressed',
'presses',
'pressing',
'pressure',
'presumably',
'presume',
'pretty',
'prevent',
'prevented',
'preventing',
'prevents',
'previous',
'previously',
'price',
'prices',
'primary',
'prime',
'primitive',
'principle',
'principles',
'print',
'printed',
'printer',
'printers',
'printing',
'printout',
'prints',
'prior',
'private',
'probably',
'problem',
'problems',
'procedure',
'process',
'processed',
'processes',
'processing',
'processor',
'processors',
'produce',
'produced',
'produces',
'producing',
'product',
'production',
'products',
'professional',
'programmer',
'programmers',
'progress',
'project',
'projects',
'promise',
'promised',
'promises',
'promising',
'prompt',
'promptly',
'prone',
'proof',
'proper',
'properly',
'properties',
'property',
'proportion',
'proposal',
'propose',
'proposed',
'proposes',
'proposing',
'prospect',
'protect',
'protected',
'protecting',
'protection',
'protects',
'protest',
'prove',
'proved',
'proves',
'provide',
'provided',
'provides',
'providing',
'proving',
'public',
'publication',
'publicity',
'publicly',
'publish',
'published',
'publishes',
'publishing',
'pull',
'pulled',
'pulling',
'pulls',
'punctuation',
'puncture',
'purchase',
'pure',
'purely',
'purpose',
'purposes',
'push',
'pushed',
'pushes',
'pushing',
'put',
'puts',
'putt',
'putted',
'putting',
'putts',
'qualified',
'qualifies',
'qualify',
'qualifying',
'quality',
'quantities',
'quantity',
'quarter',
'question',
'questions',
'queue',
'quick',
'quicker',
'quickest',
'quickly',
'quiet',
'quietly',
'quit',
'quite',
'quits',
'quitting',
'quote',
'quoted',
'quotes',
'quoting',
'race',
'radio',
'rain',
'raise',
'raised',
'raises',
'raising',
'ran',
'random',
'randomly',
'range',
'rapid',
'rapidly',
'rare',
'rarely',
'rate',
'rates',
'rather',
'raw',
're',
'reach',
'reached',
'reaches',
'reaching',
'react',
'reaction',
'read',
'readable',
'reader',
'readers',
'readily',
'reading',
'reads',
'ready',
'real',
'reality',
'really',
'reason',
'reasonable',
'reasonably',
'reasons',
'recall',
'receive',
'received',
'receives',
'receiving',
'recent',
'recently',
'reception',
'recognition',
'recommend',
'recommendation',
'recommended',
'recommending',
'recommends',
'record',
'recorded',
'recording',
'records',
'recover',
'recovered',
'recovering',
'recovers',
'red',
'reduce',
'reduced',
'reduces',
'reducing',
'reduction',
'redundant',
'refer',
'reference',
'references',
'referred',
'referring',
'refers',
'reflect',
'reflected',
'reflecting',
'reflection',
'reflects',
'refuse',
'refused',
'refuses',
'refusing',
'regard',
'regarded',
'regarding',
'regardless',
'regards',
'region',
'register',
'registered',
'registering',
'registers',
'regret',
'regular',
'regularly',
'regulation',
'regulations',
'reject',
'rejected',
'rejecting',
'rejects',
'relate',
'related',
'relates',
'relating',
'relation',
'relationship',
'relative',
'relatively',
'release',
'released',
'releases',
'releasing',
'relevance',
'relevant',
'reliable',
'religion',
'religious',
'reluctant',
'rely',
'remain',
'remained',
'remaining',
'remains',
'remark',
'remarks',
'remember',
'remembered',
'remembering',
'remembers',
'remind',
'reminded',
'reminding',
'reminds',
'remote',
'remotely',
'removal',
'remove',
'removed',
'removes',
'removing',
'repair',
'repeat',
'repeated',
'repeatedly',
'repeating',
'repeats',
'replace',
'replaced',
'replacement',
'replaces',
'replacing',
'replied',
'replies',
'reply',
'replying',
'report',
'reported',
'reporting',
'reports',
'represent',
'representation',
'representative',
'represented',
'representing',
'represents',
'reproduce',
'request',
'requested',
'requesting',
'requests',
'require',
'required',
'requirement',
'requirements',
'requires',
'requiring',
'research',
'reserve',
'reserved',
'reserves',
'reserving',
'resident',
'resolution',
'resort',
'resource',
'resources',
'respect',
'respectively',
'respects',
'respond',
'response',
'responses',
'responsibility',
'responsible',
'rest',
'restart',
'restore',
'restored',
'restores',
'restoring',
'restrict',
'restricted',
'restricting',
'restricts',
'result',
'resulted',
'resulting',
'results',
'retain',
'return',
'returned',
'returning',
'returns',
'reveal',
'revealed',
'revealing',
'reveals',
'reverse',
'review',
'rewrite',
'rid',
'ridding',
'ride',
'ridiculous',
'rids',
'right',
'rights',
'ring',
'rise',
'risk',
'river',
'road',
'role',
'roll',
'room',
'rooms',
'root',
'rough',
'roughly',
'round',
'route',
'routine',
'row',
'rubber',
'rubbish',
'rule',
'rules',
'run',
'running',
'runs',
'rush',
'sad',
'sadly',
'safe',
'safely',
'safer',
'safest',
'safety',
'said',
'saint',
'sake',
'sale',
'sales',
'same',
'sample',
'sat',
'satisfied',
'satisfies',
'satisfy',
'satisfying',
'save',
'saved',
'saves',
'saving',
'saw',
'say',
'saying',
'says',
'scale',
'scan',
'scene',
'scheme',
'school',
'schools',
'science',
'sciences',
'scientific',
'score',
'scores',
'scrap',
'scratch',
'screen',
'screens',
'script',
'search',
'searched',
'searches',
'searching',
'season',
'second',
'secondary',
'secondly',
'seconds',
'secret',
'secretary',
'section',
'sections',
'secure',
'security',
'see',
'seeing',
'seek',
'seeking',
'seeks',
'seem',
'seemed',
'seeming',
'seems',
'seen',
'sees',
'select',
'selected',
'selecting',
'selection',
'selects',
'self',
'sell',
'selling',
'sells',
'seminar',
'send',
'sending',
'sends',
'senior',
'sense',
'sensible',
'sensibly',
'sensitive',
'sent',
'sentence',
'sentences',
'separate',
'separately',
'sequence',
'sequences',
'serial',
'series',
'serious',
'seriously',
'serve',
'served',
'server',
'serves',
'service',
'services',
'serving',
'session',
'sessions',
'set',
'sets',
'setting',
'settle',
'settled',
'settles',
'settling',
'seven',
'several',
'severe',
'severely',
'sex',
'shall',
'shame',
'shape',
'share',
'shared',
'shares',
'sharing',
'sharp',
'she',
'sheet',
'shelf',
'shell',
'shift',
'ship',
'shoot',
'shop',
'shopped',
'shopping',
'shops',
'short',
'shortage',
'shorter',
'shortest',
'shortly',
'should',
'show',
'showed',
'showing',
'shown',
'shows',
'shut',
'shuts',
'shutting',
'side',
'sides',
'sight',
'sign',
'signal',
'signals',
'signed',
'significance',
'significant',
'significantly',
'signing',
'signs',
'silly',
'similar',
'similarly',
'simple',
'simpler',
'simplest',
'simply',
'simultaneous',
'simultaneously',
'since',
'sincerely',
'single',
'sit',
'site',
'sites',
'sits',
'sitting',
'situation',
'situations',
'six',
'size',
'sizes',
'skill',
'skills',
'sleep',
'slight',
'slightly',
'slip',
'slow',
'slower',
'slowest',
'slowly',
'small',
'smaller',
'smallest',
'smile',
'smooth',
'so',
'social',
'society',
'soft',
'software',
'sold',
'solely',
'solid',
'solution',
'solutions',
'solve',
'solved',
'solves',
'solving',
'some',
'somebody',
'somehow',
'someone',
'someplace',
'something',
'sometime',
'sometimes',
'somewhat',
'somewhere',
'son',
'soon',
'sooner',
'soonest',
'sophisticate',
'sophisticated',
'sophisticates',
'sophisticating',
'sorry',
'sort',
'sorted',
'sorting',
'sorts',
'sought',
'sound',
'sounded',
'sounding',
'sounds',
'source',
'sources',
'south',
'southern',
'space',
'spaces',
'spare',
'speak',
'speaker',
'speakers',
'speaking',
'speaks',
'special',
'specially',
'specific',
'specifically',
'specified',
'specifies',
'specify',
'specifying',
'speech',
'speed',
'spell',
'spelling',
'spells',
'spend',
'spending',
'spends',
'spent',
'spirit',
'spite',
'split',
'splits',
'splitting',
'spoke',
'spoken',
'spot',
'spots',
'spotted',
'spotting',
'spread',
'spreading',
'spreads',
'spring',
'square',
'stable',
'staff',
'stage',
'stages',
'stand',
'standard',
'standards',
'standing',
'stands',
'start',
'started',
'starting',
'starts',
'state',
'stated',
'statement',
'statements',
'states',
'stating',
'station',
'stations',
'statistic',
'statistical',
'statistics',
'status',
'stay',
'stayed',
'staying',
'stays',
'steal',
'step',
'stick',
'sticking',
'sticks',
'still',
'stock',
'stone',
'stones',
'stood',
'stop',
'stopped',
'stopping',
'stops',
'storage',
'store',
'stored',
'stores',
'storing',
'straight',
'straightforward',
'strange',
'strategy',
'stream',
'street',
'strength',
'strict',
'strictly',
'strike',
'strikes',
'striking',
'string',
'strings',
'strong',
'strongly',
'struck',
'structure',
'structures',
'stuck',
'student',
'students',
'studied',
'studies',
'study',
'studying',
'stuff',
'stupid',
'style',
'subject',
'subjects',
'submit',
'submits',
'submitted',
'submitting',
'subsequent',
'subset',
'substantial',
'substitute',
'subtle',
'succeed',
'success',
'successful',
'successfully',
'such',
'sudden',
'suddenly',
'suffer',
'suffered',
'suffering',
'suffers',
'suffice',
'sufficient',
'sufficiently',
'sugar',
'suggest',
'suggested',
'suggesting',
'suggestion',
'suggestions',
'suggests',
'suit',
'suitable',
'suitably',
'suited',
'suiting',
'suits',
'sum',
'summary',
'summer',
'sun',
'superior',
'supervisor',
'supplied',
'supplies',
'supply',
'supplying',
'support',
'supported',
'supporting',
'supports',
'suppose',
'supposed',
'supposedly',
'supposes',
'supposing',
'sure',
'surely',
'surface',
'surprise',
'surprised',
'surprises',
'surprising',
'survey',
'survive',
'survived',
'survives',
'surviving',
'suspect',
'suspected',
'suspecting',
'suspects',
'suspend',
'suspended',
'suspending',
'suspends',
'suspicion',
'switch',
'switched',
'switches',
'switching',
'symbol',
'symbols',
'syntax',
'system',
'systems',
'table',
'tables',
'take',
'taken',
'takes',
'taking',
'talk',
'talked',
'talking',
'talks',
'tank',
'tanks',
'tape',
'tapes',
'target',
'task',
'tasks',
'taste',
'taught',
'tax',
'tea',
'teach',
'teacher',
'teaches',
'teaching',
'team',
'technical',
'technique',
'techniques',
'technology',
'tedious',
'teeth',
'telephone',
'television',
'tell',
'telling',
'tells',
'temperature',
'temporarily',
'temporary',
'ten',
'tend',
'tendency',
'tends',
'term',
'terminal',
'terminals',
'terminology',
'terms',
'terribly',
'test',
'tested',
'testing',
'tests',
'text',
'than',
'thank',
'thanks',
'that',
'the',
'their',
'them',
'themselves',
'then',
'theoretical',
'theory',
'there',
'thereby',
'therefore',
'these',
'they',
'thin',
'thing',
'things',
'think',
'thinking',
'thinks',
'third',
'this',
'thoroughly',
'those',
'though',
'thought',
'thoughts',
'thousand',
'thousands',
'threat',
'three',
'threw',
'through',
'throughout',
'throw',
'throwing',
'thrown',
'throws',
'thus',
'ticket',
'tickets',
'tie',
'tied',
'ties',
'tight',
'till',
'time',
'timed',
'times',
'timing',
'tin',
'title',
'titles',
'to',
'today',
'together',
'token',
'told',
'tomorrow',
'tonight',
'too',
'took',
'tooth',
'top',
'topic',
'topics',
'total',
'totally',
'touch',
'touched',
'touches',
'touching',
'toward',
'towards',
'town',
'trace',
'track',
'tracks',
'traditional',
'traffic',
'train',
'trained',
'training',
'trains',
'transfer',
'transferred',
'transferring',
'transfers',
'translate',
'translated',
'translates',
'translating',
'translation',
'transport',
'trap',
'trapped',
'trapping',
'traps',
'trash',
'travel',
'treat',
'treated',
'treating',
'treatment',
'treats',
'tree',
'trees',
'trial',
'trick',
'tried',
'tries',
'trip',
'trivial',
'trouble',
'truck',
'TRUE',
'truly',
'trunk',
'trust',
'trusted',
'trusting',
'trusts',
'truth',
'try',
'trying',
'tune',
'turn',
'turned',
'turning',
'turns',
'twelve',
'twenty',
'twice',
'two',
'tying',
'type',
'typed',
'types',
'typical',
'typing',
'ugly',
'ultimate',
'ultimately',
'unable',
'unacceptable',
'unaware',
'uncertain',
'unclear',
'under',
'undergraduate',
'undergraduates',
'underneath',
'understand',
'understanding',
'understands',
'understood',
'unfortunate',
'unfortunately',
'unhappy',
'uniform',
'unique',
'unit',
'unite',
'units',
'universal',
'universities',
'university',
'unknown',
'unless',
'unlike',
'unlikely',
'unlimited',
'unnecessarily',
'unnecessary',
'unpleasant',
'unreasonable',
'unsuitable',
'until',
'unusual',
'unwanted',
'up',
'update',
'updated',
'updates',
'updating',
'upon',
'upper',
'upset',
'upsets',
'upsetting',
'upwards',
'us',
'usage',
'use',
'used',
'useful',
'useless',
'user',
'users',
'uses',
'using',
'usual',
'usually',
'utility',
'utterly',
'vacation',
'vacations',
'vague',
'vaguely',
'valid',
'validity',
'valuable',
'value',
'values',
'van',
'variable',
'variables',
'variation',
'varied',
'varies',
'variety',
'various',
'vary',
'varying',
'vast',
'vastly',
'vector',
'version',
'versions',
'very',
'via',
'vice',
'video',
'view',
'views',
'virtually',
'virtue',
'visible',
'vision',
'visit',
'vital',
'voice',
'volume',
'vote',
'votes',
'wait',
'waited',
'waiting',
'waits',
'walk',
'walked',
'walking',
'walks',
'wall',
'walls',
'want',
'wanted',
'wanting',
'wants',
'war',
'warm',
'warn',
'warned',
'warning',
'warns',
'was',
'wash',
'waste',
'wasted',
'wastes',
'wasting',
'watch',
'watched',
'watches',
'watching',
'water',
'way',
'ways',
'we',
'weapon',
'wear',
'wearing',
'wears',
'weather',
'week',
'weekend',
'weeks',
'weight',
'weird',
'welcome',
'welcomed',
'welcomes',
'welcoming',
'well',
'went',
'were',
'west',
'western',
'what',
'whatever',
'whatsoever',
'wheel',
'wheels',
'when',
'whenever',
'where',
'whereas',
'whereby',
'wherever',
'whether',
'which',
'while',
'whilst',
'white',
'who',
'whoever',
'whole',
'whom',
'whose',
'why',
'wide',
'widely',
'wider',
'widespread',
'widest',
'wife',
'wild',
'will',
'willed',
'willing',
'wills',
'win',
'wind',
'window',
'windows',
'wine',
'winning',
'wins',
'winter',
'wire',
'wise',
'wish',
'wished',
'wishes',
'wishing',
'with',
'withdraw',
'within',
'without',
'woman',
'women',
'won',
'wonder',
'wondered',
'wonderful',
'wondering',
'wonders',
'wooden',
'word',
'worded',
'wording',
'words',
'wore',
'work',
'worked',
'worker',
'workers',
'working',
'works',
'world',
'worn',
'worried',
'worries',
'worry',
'worrying',
'worse',
'worst',
'worth',
'worthwhile',
'worthy',
'would',
'write',
'writer',
'writes',
'writing',
'written',
'wrong',
'wrote',
'year',
'years',
'yellow',
'yes',
'yesterday',
'yet',
'you',
'young',
'your',
'yours',
'yourself',
'zero',
]
  var words = [];
  const urlParams = new URLSearchParams(window.location.search);
    const count = urlParams.get('count')  || 20;
  const countInput = document.getElementById('count-input');
  countInput.value = count;
  document.newGame.action = window.location.origin

  for (let i = 0; i < count; i++)
    {
      words.push(allWords[Math.floor(Math.random() * allWords.length)])
    }
  // start a word find game
  var gamePuzzle = wordfindgame.create(
    words, 
    '#puzzle', 
    '#words', 
    { height: 32, 
      width: 16, 
      fillBlanks: true
    });
  $('#solve').click( function() {
    wordfindgame.solve(gamePuzzle, words);
  });
  // create just a puzzle, without filling in the blanks and print to console
  var puzzle = wordfind.newPuzzle(
    words, 
    {height: 5, width:15, fillBlanks: true}
  );
  wordfind.print(puzzle);
});
